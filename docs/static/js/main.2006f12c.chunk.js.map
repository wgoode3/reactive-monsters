{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","pokelist","setPokelist","todisplay","setTodisplay","search","setSearch","name","sprites","pokedetails","setPokedetails","useEffect","axios","get","then","res","console","log","data","results","catch","err","filter","p","includes","className","type","placeholder","onChange","e","target","value","map","pkmn","i","key","onClick","url","getDetails","src","front_default","style","width","imageRendering","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oSAyEeA,MApEf,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAENC,EAFM,KAEIC,EAFJ,OAGqBF,mBAAS,IAH9B,mBAGNG,EAHM,KAGKC,EAHL,OAIeJ,mBAAS,IAJxB,mBAINK,EAJM,KAIEC,EAJF,OAKyBN,mBAAS,CAACO,KAAM,MAAOC,QAAS,KALzD,mBAKNC,EALM,KAKOC,EALP,KAmCb,OARAC,qBAAW,WAnBTC,IAAMC,IAAI,gDACPC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,KAAKC,SACrBjB,EAAYa,EAAIG,KAAKC,SACrBf,EAAaW,EAAIG,KAAKC,YAEvBC,OAAM,SAAAC,GAAG,OAAIL,QAAQC,IAAII,QAe3B,IAEHV,qBAAW,WACTP,EAAaH,EAASqB,QAAO,SAAAC,GAAC,OAAIA,EAAEhB,KAAKiB,SAASnB,SACjD,CAACA,IAGF,yBAAKoB,UAAU,aACb,yBAAKA,UAAU,aACb,iDAIF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,SAASC,SAAU,SAAAC,GAAC,OAAIvB,EAAUuB,EAAEC,OAAOC,WAGrG,wBAAIN,UAAU,4BACXtB,EAAU6B,KAAK,SAACC,EAAMC,GAAP,OACd,wBAAIC,IAAKD,EAAGT,UAAU,kBAAkBW,QAAS,SAAAP,GAAC,OAjC3C,SAAAI,GACjBjB,QAAQC,IAAIgB,GACZrB,IAAMC,IAAIoB,EAAKI,KACZvB,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,MAChBR,EAAeK,EAAIG,SAEpBE,OAAM,SAAAC,GAAG,OAAIL,QAAQC,IAAII,MA0BoCiB,CAAWL,KAAQA,EAAK1B,WAIpF,yBAAKkB,UAAU,YACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,kCAAkChB,EAAYF,MAC7D,yBAAKkB,UAAU,aACb,yBAAKc,IAAK9B,EAAYD,QAAQgC,cAAeC,MAAO,CAACC,MAAM,QAASC,eAAe,qBCnD7EC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdtC,OAAM,SAAAuC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.2006f12c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\n\nfunction App() {\n\n  const [pokelist, setPokelist] = useState([]);\n  const [todisplay, setTodisplay] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [pokedetails, setPokedetails] = useState({name: \"...\", sprites: []});\n\n  const getPokemon = e => {\n    axios.get(\"https://pokeapi.co/api/v2/pokemon?limit=1000\")\n      .then(res => {\n        console.log(res.data.results);\n        setPokelist(res.data.results);\n        setTodisplay(res.data.results);\n      })\n      .catch(err => console.log(err));\n  }\n\n  const getDetails = pkmn => {\n    console.log(pkmn);\n    axios.get(pkmn.url)\n      .then(res => {\n        console.log(res.data);\n        setPokedetails(res.data);\n      })\n      .catch(err => console.log(err));\n  }\n\n  useEffect( () => {\n    getPokemon();\n  }, []);\n\n  useEffect( () => {\n    setTodisplay(pokelist.filter(p => p.name.includes(search)));\n  }, [search]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <h1>Pokemon are neat</h1>\n      </div>\n      {/* <button className=\"btn btn-primary\" onClick={getPokemon}>Get Pokemon</button> */}\n\n      <div className=\"row\">\n        <div className=\"col-sm-8\">\n          <div className=\"form-group\">\n            <input type=\"text\" className=\"form-control\" placeholder=\"Search\" onChange={e => setSearch(e.target.value)} />\n          </div>\n\n          <ul className=\"list-group is-scrollable\">\n            {todisplay.map( (pkmn, i) => \n              <li key={i} className=\"list-group-item\" onClick={e => getDetails(pkmn)}>{pkmn.name}</li>\n            )}\n          </ul>\n        </div>\n        <div className=\"col-sm-4\">\n          <div className=\"card\">\n            <div className=\"card-header bg-dark text-light\">{pokedetails.name}</div>\n            <div className=\"card-body\">\n              <img src={pokedetails.sprites.front_default} style={{width:\"288px\", imageRendering:\"pixelated\"}} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}